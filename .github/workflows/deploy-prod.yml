name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ENVIRONMENT: prod

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: security-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Select Terraform Workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var-file="environments/${{ env.ENVIRONMENT }}.tfvars"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" -auto-approve

      - name: Get ECR Repository URLs
        working-directory: terraform
        id: ecr-urls
        run: |
          echo "frontend_repo=$(terraform output -raw ecr_frontend_repository_url)" >> $GITHUB_OUTPUT
          echo "backend_repo=$(terraform output -raw ecr_backend_repository_url)" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        working-directory: WeBlog-frontend
        run: |
          # Build with production optimizations
          docker build -t weblog-frontend-${{ env.ENVIRONMENT }} .

          # Tag with version if this is a release
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            docker tag weblog-frontend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.frontend_repo }}:${VERSION_TAG}
            docker push ${{ steps.ecr-urls.outputs.frontend_repo }}:${VERSION_TAG}
          fi

          docker tag weblog-frontend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.frontend_repo }}:${{ env.ENVIRONMENT }}
          docker tag weblog-frontend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.frontend_repo }}:latest
          docker push ${{ steps.ecr-urls.outputs.frontend_repo }}:${{ env.ENVIRONMENT }}
          docker push ${{ steps.ecr-urls.outputs.frontend_repo }}:latest

      - name: Build and push backend image
        working-directory: WeBlog_backend
        run: |
          # Build with production configuration
          docker build -f Dockerfile.prod -t weblog-backend-${{ env.ENVIRONMENT }} .

          # Tag with version if this is a release
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            docker tag weblog-backend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.backend_repo }}:${VERSION_TAG}
            docker push ${{ steps.ecr-urls.outputs.backend_repo }}:${VERSION_TAG}
          fi

          docker tag weblog-backend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.backend_repo }}:${{ env.ENVIRONMENT }}
          docker tag weblog-backend-${{ env.ENVIRONMENT }}:latest ${{ steps.ecr-urls.outputs.backend_repo }}:latest
          docker push ${{ steps.ecr-urls.outputs.backend_repo }}:${{ env.ENVIRONMENT }}
          docker push ${{ steps.ecr-urls.outputs.backend_repo }}:latest

      - name: Update ECS services with health checks
        run: |
          # Update services one by one with health checks
          echo "Updating backend service..."
          aws ecs update-service --cluster weblog-cluster --service weblog-backend-service --force-new-deployment --region ${{ env.AWS_REGION }}

          # Wait for backend to be healthy
          echo "Waiting for backend service to be stable..."
          aws ecs wait services-stable --cluster weblog-cluster --services weblog-backend-service --region ${{ env.AWS_REGION }}

          echo "Updating frontend service..."
          aws ecs update-service --cluster weblog-cluster --service weblog-frontend-service --force-new-deployment --region ${{ env.AWS_REGION }}

          # Wait for frontend to be healthy
          echo "Waiting for frontend service to be stable..."
          aws ecs wait services-stable --cluster weblog-cluster --services weblog-frontend-service --region ${{ env.AWS_REGION }}

      - name: Run health checks
        run: |
          # Get the load balancer URL
          cd terraform
          ALB_URL=$(terraform output -raw load_balancer_url)
          cd ..

          # Wait for services to be healthy
          echo "Running health checks..."
          for i in {1..10}; do
            if curl -f "$ALB_URL/api/health" > /dev/null 2>&1; then
              echo "Backend health check passed"
              break
            fi
            echo "Backend health check failed, retrying in 30 seconds..."
            sleep 30
          done

          for i in {1..10}; do
            if curl -f "$ALB_URL" > /dev/null 2>&1; then
              echo "Frontend health check passed"
              break
            fi
            echo "Frontend health check failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Get deployment URLs
        working-directory: terraform
        id: urls
        run: |
          echo "load_balancer_url=$(terraform output -raw load_balancer_url)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## 🚀 生产环境部署成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 访问地址" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer:** ${{ steps.urls.outputs.load_balancer_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront:** ${{ steps.urls.outputs.cloudfront_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 部署信息" >> $GITHUB_STEP_SUMMARY
          echo "- **环境:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **分支:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "- **版本:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **部署时间:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            // Create a deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 'manual',
              state: 'success',
              environment: '${{ env.ENVIRONMENT }}',
              target_url: '${{ steps.urls.outputs.cloudfront_url }}',
              description: 'Production deployment successful'
            });

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Create a deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 'manual',
              state: 'failure',
              environment: '${{ env.ENVIRONMENT }}',
              description: 'Production deployment failed'
            });
