name: Deploy to Production (EC2)

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ENVIRONMENT: prod
  DOCKER_USERNAME: mx0100 # 您的Docker Hub用户名

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  build-and-push:
    runs-on: ubuntu-latest
    needs: security-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        working-directory: WeBlog_backend
        run: |
          # 构建后端镜像
          docker build -f Dockerfile.prod -t ${{ env.DOCKER_USERNAME }}/weblog-backend:latest .

          # 如果是release，添加版本标签
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            docker tag ${{ env.DOCKER_USERNAME }}/weblog-backend:latest ${{ env.DOCKER_USERNAME }}/weblog-backend:${VERSION_TAG}
            docker push ${{ env.DOCKER_USERNAME }}/weblog-backend:${VERSION_TAG}
          fi

          # 推送latest标签
          docker push ${{ env.DOCKER_USERNAME }}/weblog-backend:latest

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Select Terraform Workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var-file="environments/${{ env.ENVIRONMENT }}.tfvars"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" -auto-approve

      - name: Deploy to EC2
        run: |
          # 获取EC2实例信息
          cd terraform
          EC2_IP=$(terraform output -raw ec2_public_ip)

          # 等待EC2实例完全启动
          echo "等待EC2实例启动完成..."
          sleep 120

          # 获取数据库信息
          DB_ENDPOINT=$(terraform output -raw rds_endpoint)
          DB_HOST=$(echo $DB_ENDPOINT | cut -d: -f1)
          DB_NAME=$(terraform output -raw database_name)
          DB_USERNAME=$(terraform output -raw database_username)
          DB_PASSWORD=$(terraform output -raw database_password)

          # SSH到EC2实例并重新部署
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/weblog-prod-key.pem ec2-user@$EC2_IP << EOF
            cd /opt/weblog
            
            # 设置环境变量
            export DB_HOST=$DB_HOST
            export DB_NAME=$DB_NAME
            export DB_USERNAME=$DB_USERNAME
            export DB_PASSWORD='$DB_PASSWORD'
            
            # 停止旧容器
            docker-compose -f docker-compose.prod.yml down
            
            # 拉取最新镜像
            docker-compose -f docker-compose.prod.yml pull
            
            # 启动新容器（明确使用prod profile）
            docker-compose -f docker-compose.prod.yml up -d
            
            # 等待服务启动
            sleep 30
            
            # 检查服务状态
            docker-compose -f docker-compose.prod.yml ps
          EOF

      - name: Upload S3 and update CloudFront
        run: |
          # 构建前端
          cd WeBlog-frontend
          npm ci
          npm run build

          # 获取S3桶名
          cd ../terraform
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)

          # 上传到S3
          aws s3 sync ../WeBlog-frontend/dist/ s3://$S3_BUCKET --delete

          # 清除CloudFront缓存
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

      - name: Run health checks
        run: |
          cd terraform
          BACKEND_URL=$(terraform output -raw backend_url)
          FRONTEND_URL=$(terraform output -raw frontend_url)

          # 检查后端健康状态
          for i in {1..10}; do
            if curl -f "$BACKEND_URL/actuator/health" > /dev/null 2>&1; then
              echo "✅ 后端健康检查通过"
              break
            fi
            echo "⏳ 等待后端启动... ($i/10)"
            sleep 30
          done

          # 检查前端
          for i in {1..10}; do
            if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
              echo "✅ 前端健康检查通过"
              break
            fi
            echo "⏳ 等待前端准备就绪... ($i/10)"
            sleep 30
          done

      - name: Create deployment summary
        run: |
          cd terraform
          BACKEND_URL=$(terraform output -raw backend_url)
          FRONTEND_URL=$(terraform output -raw frontend_url)

          echo "## 🚀 生产环境部署成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 访问地址" >> $GITHUB_STEP_SUMMARY
          echo "- **后端API:** $BACKEND_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **前端应用:** $FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 健康检查" >> $GITHUB_STEP_SUMMARY
          echo "- **后端健康:** $BACKEND_URL/actuator/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 部署信息" >> $GITHUB_STEP_SUMMARY
          echo "- **环境:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **部署时间:** $(date -u)" >> $GITHUB_STEP_SUMMARY
